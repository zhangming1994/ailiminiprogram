package aliminiprogram

import (
	"context"
	"log"
	"testing"
)

func initClient() *Client {
	// 应用共要证书 appCertPublicKey_xxxx.crt
	// 支付宝共要证书 alipayCertPublicKey_RSA2.crt
	// private 私钥 public 支付宝公钥证书 rootCertSN 根证书SN appCertSN 应用公钥证书
	aliMiniProgram, err := NewMiniProgramClient("2021003140601108",
		"MIIEogIBAAKCAQEAjSqrvIkA4nat+pCu+GYl2O6seFSxk58aIWyvVMOk6GSZJH54oNDCUF+hiXj3mWN0gTcrRAwIuJKzOQqEfQeSx21rH8sGe+kjmBZ7DzS+sIyBN6nL4fGf3p9A/7Jh/F+S/w0O9rXEoz5f/aejRuUPZnhudAg1DaYvgdD8GhBrQ2BPi0yG0HD/rHvsHcYE5rkvE6GO+ugReMD25jCsse4fsjokPJUXT//N5kiFQ6QRjeu3mp++SPEwuWw4uY3vJMRhORnd7rgpee3j8F7LcnZMJijtbUyYlI6WZIZrCzm0eaJFSIPKfy8KDSPiRl8IKY0nkgTuiYdCBiSSg1vPuGz+JQIDAQABAoIBADK4YSoFY576mzoK4AL52KFf5/H4JDFxGddmkHx5KvggpPF6y2akexybr5OQNg4TsNl4dAAn/r4qX2CgScgOf4tN4g5zSOoecx6C/UYSYm1WnlrclBejVBiNybHVauVdhZhEHdtApd0tXRnrMHwZcvYTUUQ5aq5zxl/zMZE/0vpKyLv/j04aXPYysL/TIBdtpzXf0KucrhXcMpejMZ2gRwk74Q5yz5x6Z/8ohpPuqxFsQkCUfwapFJXdTdp7hOsERruPM9k7iIvlZZ+DZOe+ThESxMbWtL4aE6v8rge3zXFvwiNw+6SRv4AaQ8G6TvR7oPf+g3BvGFX+F6s6X5GBFEUCgYEAxF/kkDDeh1YWDJ349MkmZsfN5E3NRZdSfhcd2jD5iCVKow9vPzXv1RGargHZfoKr8pCPEb5Bl/hP52Gj5CCUqs3YL4cwWUHr7uTXRDl+YuqiCHZWxUjLCklZzei468bGKs8Ur/XV0D0m2uL7RDczRwyqFZaFu4WuwZQb4CISjAsCgYEAuAd+PI4M4DOGVkebDaF2fKISt7fBW1cHjchTDPEngjbf7tOWNxYSfTYg/NuamMiGXUIXM47OIhPbjpvWb8r0aMNRxzADu74MLpdBKTCxT6nHx4Rdjvfjqk65kUTs3AmBpKdYN6rJQn1ltzVQYmJ/vSXfcm2UnQySf/UWZYxozI8CgYBqdv7I+eW7g/2iS4cs111dfdfvfgrbPuY3fDrwD3tJx8YGT5jlsU1cvBWbX19WSmwEr0ERwo93X+WaMYKUbOGNFNqvMeERkz7hnunikDUoVcMRSW9TuFp0Mj5g91pCYdsQXIL/vw1zv6OwKj1Fx5OiYohX+ep5N0n+o1jVlENv7wKBgEmnhhjKadDaDmw94IsGEpwzafZp71OVc4qFoOfPJRbyy5GU0cxeYywGHBHX+vonV8+/gfW6tDnjZL6hFKRNwKCle/eS+guMNuf21becq3rM4w6xpZhxEoe5VoAT7BDtJRw3dhFho4efFLTM+81EywdzPwlXXmG1BHV+LGacWd11AoGAcOj80vCWcLeBqz/krUQI4QmAxzlP0gcVScq2qdfYAdHFlJ67wvF/cC7anN5KeAoFa8rTIAbm+hSGCa7lxRo0v6nzGdB/Una3Yj+qLK6lh1ZggnYzs008pij8tRl3R5V6/yJyxKs5mF+FGO4xYm102GB57PyimGcTc8eWTE29Vws=",
		"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURyRENDQXBTZ0F3SUJBZ0lRSUNBUkZ5MUJ2Y0NJMzkraGc5Zno4VEFOQmdrcWhraUc5dzBCQVFzRkFEQ0JnakVMTUFrR0ExVUUKQmhNQ1EwNHhGakFVQmdOVkJBb01EVUZ1ZENCR2FXNWhibU5wWVd3eElEQWVCZ05WQkFzTUYwTmxjblJwWm1sallYUnBiMjRnUVhWMAphRzl5YVhSNU1Ua3dOd1lEVlFRREREQkJiblFnUm1sdVlXNWphV0ZzSUVObGNuUnBabWxqWVhScGIyNGdRWFYwYUc5eWFYUjVJRU5zCllYTnpJRElnVWpFd0hoY05NakF4TVRFM01UTXlNREk1V2hjTk1qSXhNVEUzTVRNeU1ESTVXakNCakRFTE1Ba0dBMVVFQmhNQ1EwNHgKSnpBbEJnTlZCQW9NSHVhZHJlVzNudW1Va09lcm51ZW5rZWFLZ09hY2llbVprT1dGck9XUHVERVBNQTBHQTFVRUN3d0dRV3hwY0dGNQpNVU13UVFZRFZRUURERHJtbEsva3U1amxycDBvNUxpdDVadTlLZWU5a2VlN25PYUtnT2FjcithY2llbVprT1dGck9XUHVDMHlNRGc0Ck5qSXhPVGt3TVRNeE1USTNNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQW9PQ3Y5NTJKRXkrVG9wQVUKUE1HWXFadlpsQ0pWOGs0bXhpSWh1b0pmL1FoaEdGalhKWXBqTE1XWGNBUHByZFV6WEx4bzRJQnBiY2hra2grMU9NUHRobnMzN2FUbgplVGhCVVZ3bGkxcWxpaXF1OUU0RDhOam52QkxIYnBEVWlDNjFtcXhXSFdFSmpFZ0d6eDhscVAwbVlRbllab3JLdFFaVlJSSWx1L1BqCnlaZUJnb0xYVG1IeW5jOUlKT2VwVHBLcDF2TzZZMG9TNzJ6SklBcWdLSURlMXkzb1owNDJpQk1pcmZYYjZTRkZxMGtkYlpyU0l3V1YKQ1krVGV4cTlDR3JkZ0hsT0VSNG1KOHZQMzhIejBUQWFIM0VmVFhFUllNQmE2eUpQY2VMVTBieFZjOEZoQXJIZ3FUWmUxWlNwbjFucwpBZm5yQWQvOUxDRXhHNXpYbHZ2RjB3SURBUUFCb3hJd0VEQU9CZ05WSFE4QkFmOEVCQU1DQS9nd0RRWUpLb1pJaHZjTkFRRUxCUUFECmdnRUJBQ08yOWpvUFdrMFNMS3pZb3d4d3hhRy81dUhlUndUTXYxVXJPNDhoWFdGbVplWGlFZXhGWEUvelp4a0wrenBFbUlnakQzRGYKVVcwREhCZEd0TjdxMG1sK2NQSjFxTkF1K3doMk5UQVJPeEdDMlJ1cWFya0tkVmMwcFF1Ti81aUR5amtGNWFEN1Q0YTRMS2N6ZUlvZgoyZ1BkbkJmK3RtVkZYUHQxMVlvcDQ0c1Y2MGg5ZVR5Y3pIM0N0QysrZGNjY2oyMTJEcXQyUEFUNldoNXRnWUwyWkRocWkzaFdpVitvCkordVE3eGk1MzJmZm9JZmN6UjRJMXZXS1VWU0NadjN4RG10ZE1NVjdIa1dNYXZ1K3AwMU9abVlyZWw3ZXhKL0I1VFN6SjlheVJ0Q0EKd0g2a2N3SVhBeGltVW5Dc1Nnc0c1bUgvL3M5U0Q1b3VKUmtuSFM1ZGZpMD0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQotLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0KTUlJRTRqQ0NBc3FnQXdJQkFnSUlZc1NyNWJLQU1sOHdEUVlKS29aSWh2Y05BUUVMQlFBd2VqRUxNQWtHQTFVRUJoTUNRMDR4RmpBVQpCZ05WQkFvTURVRnVkQ0JHYVc1aGJtTnBZV3d4SURBZUJnTlZCQXNNRjBObGNuUnBabWxqWVhScGIyNGdRWFYwYUc5eWFYUjVNVEV3Ckx3WURWUVFERENoQmJuUWdSbWx1WVc1amFXRnNJRU5sY25ScFptbGpZWFJwYjI0Z1FYVjBhRzl5YVhSNUlGSXhNQjRYRFRFNE1ETXkKTWpFME16UXhOVm9YRFRNM01URXlOakUwTXpReE5Wb3dnWUl4Q3pBSkJnTlZCQVlUQWtOT01SWXdGQVlEVlFRS0RBMUJiblFnUm1sdQpZVzVqYVdGc01TQXdIZ1lEVlFRTERCZERaWEowYVdacFkyRjBhVzl1SUVGMWRHaHZjbWwwZVRFNU1EY0dBMVVFQXd3d1FXNTBJRVpwCmJtRnVZMmxoYkNCRFpYSjBhV1pwWTJGMGFXOXVJRUYxZEdodmNtbDBlU0JEYkdGemN5QXlJRkl4TUlJQklqQU5CZ2txaGtpRzl3MEIKQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBc0xNZllhb1JvUFJibURjQWZYUENtS2Y0M3BXUk41eVRYYS9LSldPMGwrbXJnUXZzODliQQpORXZiRFV4bGtHd3ljd3R3aTVEZ0J1QmdWaExsaVh1K1I5Q1lncjJkWHM4RDhIeC9nc2dnRGN5R1BMbVZyRE9uTCtkeWVhdWhlQVJaCmZBM2R1NjBmd0V3d2JHY1ZJcEl4UGEvNG4zSVMvRWx4UWE2RE5ncXhoOEo5WHdoN3FNR2wwSks5K2JBTHV4ZjdCNTQxR3I0cDBXRU4KRzhmaGdqQlY0dzR1dDllUUxPb2ExZWRkT1VTWmN5NDZaN2FsbHdvd3dndDdiNVZGZngvUDFpS0ozTHpCTWdrQ0s3R1oya2lMckw3UgppcVYraDQ4Mko3aGtKRCthcmRvYzZMbnJITy9oSVp5bUR4b2srVkg5ZlZlVWRRYTI5SVpLcklEVmo2NVRIUUlEQVFBQm8yTXdZVEFmCkJnTlZIU01FR0RBV2dCUmZkTFFFd0U4SFd1cmxzZHNpbzRkQnNwemhBVEFkQmdOVkhRNEVGZ1FVU3FIa1lJTnRVU0F0RFBuUzhYb3kKb1A5cDdxRXdEd1lEVlIwVEFRSC9CQVV3QXdFQi96QU9CZ05WSFE4QkFmOEVCQU1DQVFZd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dJQgpBSVE4VHpGeTRiVklWYjgrV2hIS0NrS05QY0plMkVadUljcXZSb2k3MjdsWlRKT2ZZeS9Kekx0Y2t5WllmRUk4SjBsYXNaMjl3a1R0CmExSWpTbythNlhkaHVkVTRPTlZCckw3MFU4S3pudHBsdy82VEJOYkxGcHA3dGFSQUxqVWdiQ09rNEVvQk1iZUNMMEdpWVlzVFMwbXcKN3hkeVN6bUdRa3U0R1R5cXV0SUdQUXdLeFNqOWlTRncxRkNacXI0VlA0dHlYek1VZ2M1MlN6YWdBNmk3QXlMZWRkM3RiUzZsblI1QgpMK1c5S3g5aHdUOEw3V0FOQXhRenYvakdsZGV1U0xOOGJzVHhsT1lsc2RqbUlHdS9DOU9XYmxQWUdwalFRSVJ5dnM0Q2MvbU5ocmgrCjE0RVFnd3VlbUlJRkRMT2djRCtpSVNvTjhDcWVnZWxOY0puZEZ3MVBETjZMa1ZvaUh6OXA3anpzZ2U4UktheS9RVzZDMDNLTkRwV1oKRVVDZ0NVZGZIZm84eEtlUitMTDFjZm4yNEhLSm1adDhML2FlUlp3WjFqd2VQWEZSVnRpWEVMdmdKdU0vdEpESUZqMktEMzM3aVY2NApmV2NLUS95ZERWR3FmRFpBZGNVNGhRZHNyUFdFTndQVFFQZlZQcTJOTkxNeUlIOStXS3g5RWQ2L1d6ZVptSXk1WldwWDFUdFRvbG82Ck9KWFFGZUl0TUFqSHhXL1pTWlRvazVJUzNGdVJoRXh0dXJhSW5uempZcHg1MGE2a1MzNGM1K2M4aFlxN3NBdFovQ05MWm1CbkJDRkQKYU1RcVQ4eEZaSjV1b2xVYVNlWHhnN0pGWTFRc1lwNVJLdmo0U2pGd0NHS0oyK2hQUGU5VXl5bHR4T2lkTnR4amFrbk9DZUJIeXRPcgotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==",
		"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tDQpNSUlCc3pDQ0FWZWdBd0lCQWdJSWFlTCt3QmNLeG5zd0RBWUlLb0VjejFVQmczVUZBREF1TVFzd0NRWURWUVFHDQpFd0pEVGpFT01Bd0dBMVVFQ2d3RlRsSkRRVU14RHpBTkJnTlZCQU1NQmxKUFQxUkRRVEFlRncweE1qQTNNVFF3DQpNekV4TlRsYUZ3MDBNakEzTURjd016RXhOVGxhTUM0eEN6QUpCZ05WQkFZVEFrTk9NUTR3REFZRFZRUUtEQVZPDQpVa05CUXpFUE1BMEdBMVVFQXd3R1VrOVBWRU5CTUZrd0V3WUhLb1pJemowQ0FRWUlLb0VjejFVQmdpMERRZ0FFDQpNUENjYTZwbWdjY2hzVGYyVW5CZUw5cnRwNG53K2l0azFLenJtYm5xbzA1bFV3a3dsV0srNE9JcnRGZEFxblJUDQpWN1E5djFodGt2NDJUc0l1dHpkMTI2TmRNRnN3SHdZRFZSMGpCQmd3Rm9BVVRES3hsOWt6RzhTbUJjSEc1WXRpDQpXL0NYZGxnd0RBWURWUjBUQkFVd0F3RUIvekFMQmdOVkhROEVCQU1DQVFZd0hRWURWUjBPQkJZRUZFd3lzWmZaDQpNeHZFcGdYQnh1V0xZbHZ3bDNaWU1Bd0dDQ3FCSE05VkFZTjFCUUFEU0FBd1JRSWdHMWJTTGVPWHAzb0I4SDdiDQo1M1crQ0tPUGwyUGtubVdFcS9sTWh0bjI1SGtDSVFEYUhEZ1d4V0Z0bkNyQmpIMTYvVzNFem43L1UvVmpvNXhJDQpwRG9pVmhzTHdnPT0NCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0NCg0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tDQpNSUlGMHpDQ0E3dWdBd0lCQWdJSUg4K2hqV3BJRFJFd0RRWUpLb1pJaHZjTkFRRUxCUUF3ZWpFTE1Ba0dBMVVFDQpCaE1DUTA0eEZqQVVCZ05WQkFvTURVRnVkQ0JHYVc1aGJtTnBZV3d4SURBZUJnTlZCQXNNRjBObGNuUnBabWxqDQpZWFJwYjI0Z1FYVjBhRzl5YVhSNU1URXdMd1lEVlFRRERDaEJiblFnUm1sdVlXNWphV0ZzSUVObGNuUnBabWxqDQpZWFJwYjI0Z1FYVjBhRzl5YVhSNUlGSXhNQjRYRFRFNE1ETXlNVEV6TkRnME1Gb1hEVE00TURJeU9ERXpORGcwDQpNRm93ZWpFTE1Ba0dBMVVFQmhNQ1EwNHhGakFVQmdOVkJBb01EVUZ1ZENCR2FXNWhibU5wWVd3eElEQWVCZ05WDQpCQXNNRjBObGNuUnBabWxqWVhScGIyNGdRWFYwYUc5eWFYUjVNVEV3THdZRFZRUUREQ2hCYm5RZ1JtbHVZVzVqDQphV0ZzSUVObGNuUnBabWxqWVhScGIyNGdRWFYwYUc5eWFYUjVJRkl4TUlJQ0lqQU5CZ2txaGtpRzl3MEJBUUVGDQpBQU9DQWc4QU1JSUNDZ0tDQWdFQXR5dFRSY0JOdXVyNWg4eHV4bmxLSmV0VDY1Y0hHZW1HaThvRCtiZUhGUFRrDQpyVVRsRnQ5WG43ZkFWR282UVNzUGI5dUdMcFVGR0VkR21ic1EycTljVjRQODlxa0gwNFZ6SVB3VDdBeXdKZHQyDQp4QXZNcytNZ0hGSnpPWWZMMVFrZE9PVk83TndLeEg4SXZsUWdGYWJXb21XazJFaTlXZlV5eEZqVk8xTFZoMEJwDQpkUkJlV0xNa2R1ZHgwdGwzKzIxdDFhcG5SZUZOUTVuZlgyOXhlU3hJaGVzYU1IRFpGVmlPL0RYRE5XMkJjVHM2DQp2U1dLeUo0WUlJSXpTdHVtRDhLMXhNc29hWkJNRHhnNGl0aldGYUtSZ051UGlJbjRrakRZM2tDNjZTbC82eVRsDQpZVXo4QXliYkVzSUNaenNzZFpoN2pjTmIxVlJmazc5bGdBcHJtL0t0bCttZ3JVMWdhTUdQMU9FMjVKQ2JxbGkxDQpQYncvQnBQeW55UDkrWHVsRSsybXhGd1RZaEtBd3BESURLdVlzRlVYdW84dDI2MXBDb3ZJMUNYRnpBUU0ydzdIDQpEdEEybk9YU1c2cTBqR0RKNStXYXVIK0s4WlN2QTZ4NHNGbzR1MEtOQ3gwUk9UQnBMaWY2R1RuZ3FvM3NqKzk4DQpTWmlNTkxGTVFvUWtqa2RONVE1ZzlONkNGWlBWWjZRcE8wSmNJYzdTMWxlL2c5ejVpQktuaWZyS3h5MFRRanRHDQpQc0R3Yzh1YlBuUm0vRjgyUlJlQ295Tnl4NjNpbmRwZ0ZmaE43K0t4VUlROWNPd3dUdmVtbW9yMEErWlFhbVJlDQo5TE11aUVmRWFXVURLKzZPMEdsOGxPNTcxdUk1b25ZZE4xVklnT213RmJlK0Q4VGN1elZqSVovenZIckFHVWNDDQpBd0VBQWFOZE1Gc3dDd1lEVlIwUEJBUURBZ0VHTUF3R0ExVWRFd1FGTUFNQkFmOHdIUVlEVlIwT0JCWUVGRjkwDQp0QVRBVHdkYTZ1V3gyeUtqaDBHeW5PRUJNQjhHQTFVZEl3UVlNQmFBRkY5MHRBVEFUd2RhNnVXeDJ5S2poMEd5DQpuT0VCTUEwR0NTcUdTSWIzRFFFQkN3VUFBNElDQVFDVllhT3RxT0xJcHNyRWlrRTVsYitVQVJOU0ZKZzZ0cGtmDQp0SjJVOFFGL0RlamVtRUh4NUlDbFF1NmFqeGp0dTBBaWU0LzNVbklYb3A4bkgvUTU3bCtXeXQ5VDdOMldQaU5xDQpKU2xZS1liSnBQRjhMWGJ1S1lHM0JURlRkT1ZGSWVSZTJOVXlZaC94czZiWEdyNFdLVFhiM3FCbXpSMDJGU3kzDQpJT0RRdzVRNnpwWGo4cHJZcUZIWXNPdkdDRWMxQ3dKYVNhWXdSaFRrRmVkSlV4aXloeUI1R1F3b0ZmRXhDVkhXDQowNVpGQ0FWWUZsZENKdlV6ZnpyV3ViTjZ3WDBERDJkd3VsdGdtbGRPbi9XL244YXQ1Mm1wUE52SWRiWmIyRjQxDQpUMFlaZW9XbkNKcllYanEvMzJvYzFjbWlmSUhxeVNueU1uYXZpNzVEeFBDZFpzQ09wU0FUNGo0bEFRUkdzZmdJDQpra0xQR1FpZU1mTk5rTUNLaDdxandkWEFWdGRxaGYwUlZ0RklMSDNPeUVvZGxrMUhZWHFYNWlFNXdsYUt6RG9wDQpQS3dmMlEzQkVycTF4Q2hZR0dWUytkRXZ5WGMvMm5JQmx0N3VMV0twNFhGanFla0tiYUdhTEpkallQNWIyczdODQoxZE0wTVhRL2Y4WG9YS0JrSk56RWlNM2hmc1U2RE9SRWdNYzFESXNGS3hmdU13WDNFa1ZRTTFJZjhnaGI2eDVZDQpqWGF5ditOTGJpZE9Tems0dmw1UXduZ08vSllGTWtvYzZpOUxOd0VhRXRSOVBobnJkdWJ4bXJ0TStSamZCbTAyDQo3N3EzZFNXRkVTRlE0UXhZV2V3NHBIRTBEcFdiV3kvaU1JS1E2VVo1Ukx2QjhHRWNndDhPTjdCQkplTWMrRHlpDQprVDlxaHFuK2x3PT0NCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0NCg0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tDQpNSUlDaURDQ0FneWdBd0lCQWdJSVFYNzZVc0IvMzBvd0RBWUlLb1pJemowRUF3TUZBREI2TVFzd0NRWURWUVFHDQpFd0pEVGpFV01CUUdBMVVFQ2d3TlFXNTBJRVpwYm1GdVkybGhiREVnTUI0R0ExVUVDd3dYUTJWeWRHbG1hV05oDQpkR2x2YmlCQmRYUm9iM0pwZEhreE1UQXZCZ05WQkFNTUtFRnVkQ0JHYVc1aGJtTnBZV3dnUTJWeWRHbG1hV05oDQpkR2x2YmlCQmRYUm9iM0pwZEhrZ1JURXdIaGNOTVRrd05ESTRNVFl5TURRMFdoY05ORGt3TkRJd01UWXlNRFEwDQpXakI2TVFzd0NRWURWUVFHRXdKRFRqRVdNQlFHQTFVRUNnd05RVzUwSUVacGJtRnVZMmxoYkRFZ01CNEdBMVVFDQpDd3dYUTJWeWRHbG1hV05oZEdsdmJpQkJkWFJvYjNKcGRIa3hNVEF2QmdOVkJBTU1LRUZ1ZENCR2FXNWhibU5wDQpZV3dnUTJWeWRHbG1hV05oZEdsdmJpQkJkWFJvYjNKcGRIa2dSVEV3ZGpBUUJnY3Foa2pPUFFJQkJnVXJnUVFBDQpJZ05pQUFTQ0NSYTk0UUkwdlI1VXA5WXI5SEV1cHo2aFNveWp5U1lxbzd2ODM3S25tanZlVUlVTml1QzlwV0FVDQpXUDNqd0xYM0hremVpTmRlZzIyYTBJWlBvU1VDcGFzdWZpTEFuZlhoNk5JbkxpV0JyakxKWERTR2FZN3Zhb2t0DQpycFp2QWRtalhUQmJNQXNHQTFVZER3UUVBd0lCQmpBTUJnTlZIUk1FQlRBREFRSC9NQjBHQTFVZERnUVdCQlJaDQo0WlRnRHBrc0hMMnFjcGtGa3hEMnpWZDE2VEFmQmdOVkhTTUVHREFXZ0JSWjRaVGdEcGtzSEwycWNwa0ZreEQyDQp6VmQxNlRBTUJnZ3Foa2pPUFFRREF3VUFBMmdBTUdVQ01RRDRJb3FUMmhUVW4wanQ3b1hMZE1KOHE0dkxwNnNnDQp3SGZQaU9yOWd4cmViK2U2T2lkd2QyTERuQzRPVXFDV2lGOENNQXp3S3M0U25ESlljTUxmMnZwa2J1VkU0ZFRIDQpSZ2x6K0hHY1RMV3NGczRLeExzcTdNdVUrdkpUQlVlREplRGpkQT09DQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tDQoNCi0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQ0KTUlJRHhUQ0NBcTJnQXdJQkFnSVVFTWRrNmRWZ09FSVMyY0NQMFE0M1A5MFBzNVl3RFFZSktvWklodmNOQVFFRg0KQlFBd2FqRUxNQWtHQTFVRUJoTUNRMDR4RXpBUkJnTlZCQW9NQ21sVWNuVnpRMmhwYm1FeEhEQWFCZ05WQkFzTQ0KRTBOb2FXNWhJRlJ5ZFhOMElFNWxkSGR2Y21zeEtEQW1CZ05WQkFNTUgybFVjblZ6UTJocGJtRWdRMnhoYzNNZw0KTWlCU2IyOTBJRU5CSUMwZ1J6TXdIaGNOTVRNd05ERTRNRGt6TmpVMldoY05Nek13TkRFNE1Ea3pOalUyV2pCcQ0KTVFzd0NRWURWUVFHRXdKRFRqRVRNQkVHQTFVRUNnd0thVlJ5ZFhORGFHbHVZVEVjTUJvR0ExVUVDd3dUUTJocA0KYm1FZ1ZISjFjM1FnVG1WMGQyOXlhekVvTUNZR0ExVUVBd3dmYVZSeWRYTkRhR2x1WVNCRGJHRnpjeUF5SUZKdg0KYjNRZ1EwRWdMU0JITXpDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBT1BQU2hwVg0KbkpiTXFxQ3c2Qnoxa2Vobm9Qc3Q5cGtyMFY5aWRPd1Uyb3lTNDcvSGpKWGs5UmQ1YTl4ZndrUE84OHRyVXB6NQ0KNEdtbXdzcERYalZGdTlMMGVGYVJ1SDNLTWhhMUFrMDFjaXRiRjdjUUxKbFM3WEkrdHBrVEdIRVk1cHQzRXNRZw0Kd3lrZlpsL0ExanJuU2tzcE1TOTk3cjJHaW01NGN3eittVE1nRFJoWnNLSy9sYk9lQlBwV3RjRml6alhZQ3Fodw0KV2t0dlFmWkJZaTZvNHNIQ3Nobk9zd2k0eVYxcCtMdUZjUTJjaVlkV3ZVTGgxZVpoTHhIYkdYeXpuWUhpMGRHTg0KeitJOUg4YVh4cUFRZkhWaGJkSE56aTc3aEN4RmpPeStoSHJHc3l6anJkMnN3VlEyaVVXUDhCZkVRcUdMcU0xZw0KS2dXS1lmY1RHZGJQQjFNQ0F3RUFBYU5qTUdFd0hRWURWUjBPQkJZRUZHL29BTXhUVmU3eTArNDA4Q1RBSzhoQQ0KdVR5Uk1COEdBMVVkSXdRWU1CYUFGRy9vQU14VFZlN3kwKzQwOENUQUs4aEF1VHlSTUE4R0ExVWRFd0VCL3dRRg0KTUFNQkFmOHdEZ1lEVlIwUEFRSC9CQVFEQWdFR01BMEdDU3FHU0liM0RRRUJCUVVBQTRJQkFRQkxuVVRmVzdocA0KZW1NYnVVR0NrN1JCc3d6T1Q4M2JETTY4MjRFa1VuZitYMGlLUzk1U1VOR2VlU1dLMm8vM0FMSm81aGk3R1pyMw0KVThlTGFXQWNZaXpmTzk5VVhNUkJQdzVQUlIrZ1hHRXJvbkdVdWdMcHhzanV5bm9MUXU4R1FBZXlzU1hLYk4xSQ0KVXVnRG85dThpZ0pPUllBKzVtczBzNXNDVXlTcWJRMlI1ei9Hb2NleUk5TGR4SVZhMVJqVlg4cFlPajhKRnd0bg0KREpOM2Z0U0Z2Tk1Zd1J1SUxLdXFVWVNIYzJHUFlpSFZmbERoNW5EeW1DTU9RRmNGRzNXc0V1QitFWVFQRmdJVQ0KMURIbWRaY3o3TGx4OFVPWlhYMkp1cFdDWXpLMVhoSmIrcjRoSzVuY2YvdzhxR3RZbG15SnB4azNocjFUZlVKWA0KWWY0WnIwZkpzR3V2DQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0t",
		"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVxekNDQTVPZ0F3SUJBZ0lRSUNJSUFibHF1QXlzRkx4N0JNRVh6akFOQmdrcWhraUc5dzBCQVFzRkFEQ0JnakVMTUFrR0ExVUUKQmhNQ1EwNHhGakFVQmdOVkJBb01EVUZ1ZENCR2FXNWhibU5wWVd3eElEQWVCZ05WQkFzTUYwTmxjblJwWm1sallYUnBiMjRnUVhWMAphRzl5YVhSNU1Ua3dOd1lEVlFRREREQkJiblFnUm1sdVlXNWphV0ZzSUVObGNuUnBabWxqWVhScGIyNGdRWFYwYUc5eWFYUjVJRU5zCllYTnpJREVnVWpFd0hoY05Nakl3T0RBeE1ETXlORE0wV2hjTk1qY3dOek14TURNeU5ETTBXakJ6TVFzd0NRWURWUVFHRXdKRFRqRW4KTUNVR0ExVUVDZ3dlNXAydDViZWU2WlNRNTZ1ZTU2ZVI1b3FBNXB5SjZabVE1WVdzNVkrNE1ROHdEUVlEVlFRTERBWkJiR2x3WVhreApLakFvQmdOVkJBTU1JVEl3T0RnMk1qRTVPVEF4TXpFeE1qY3RNakF5TVRBd016RTBNRFl3TVRFd09EQ0NBU0l3RFFZSktvWklodmNOCkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFJMHFxN3lKQU9KMnJmcVFydmhtSmRqdXJIaFVzWk9mR2lGc3IxVERwT2hrbVNSK2VLRFEKd2xCZm9ZbDQ5NWxqZElFM0swUU1DTGlTc3prS2hIMEhrc2R0YXgvTEJudnBJNWdXZXc4MHZyQ01nVGVweStIeG45NmZRUCt5WWZ4ZgprdjhORHZhMXhLTStYLzJubzBibEQyWjRiblFJTlEybUw0SFEvQm9RYTBOZ1Q0dE1odEJ3LzZ4NzdCM0dCT2E1THhPaGp2cm9FWGpBCjl1WXdyTEh1SDdJNkpEeVZGMC8vemVaSWhVT2tFWTNydDVxZnZranhNTGxzT0xtTjd5VEVZVGtaM2U2NEtYbnQ0L0JleTNKMlRDWW8KN1cxTW1KU09sbVNHYXdzNXRIbWlSVWlEeW44dkNnMGo0a1pmQ0NtTko1SUU3b21IUWdZa2tvTmJ6N2hzL2lVQ0F3RUFBYU9DQVNrdwpnZ0VsTUI4R0ExVWRJd1FZTUJhQUZIRUg0Z1JoRnVUbDhtWHJNUS9KNFBROG10V1JNQjBHQTFVZERnUVdCQlJEaXlFYzBRaGpFQ3JiCk8rTkN4c2IrM0JIL2VqQkFCZ05WSFNBRU9UQTNNRFVHQjJDQkhBRnVBUUV3S2pBb0JnZ3JCZ0VGQlFjQ0FSWWNhSFIwY0RvdkwyTmgKTG1Gc2FYQmhlUzVqYjIwdlkzQnpMbkJrWmpBT0JnTlZIUThCQWY4RUJBTUNCc0F3THdZRFZSMGZCQ2d3SmpBa29DS2dJSVllYUhSMApjRG92TDJOaExtRnNhWEJoZVM1amIyMHZZM0pzTmpndVkzSnNNR0FHQ0NzR0FRVUZCd0VCQkZRd1VqQW9CZ2dyQmdFRkJRY3dBb1ljCmFIUjBjRG92TDJOaExtRnNhWEJoZVM1amIyMHZZMkUyTG1ObGNqQW1CZ2dyQmdFRkJRY3dBWVlhYUhSMGNEb3ZMMk5oTG1Gc2FYQmgKZVM1amIyMDZPRE0wTUM4d0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFNUEhxT1FqSzREU1A3YldyY3VSd21yY1JsNWNhN1ppZjQ2Qwp1YjBRQUJoeVpXemZyaXl3SFZneEtsNW5FMUpvaGthalVqa0NOWmtLVGhwaE52eTlRMHBZQVdzQmMxUXpDTmNnV3F3STVqNUdnbU9OCm52MkF5bFJzYTRITWNkcHc4bmJjY0RmV2tlMkNML2FjZnYvVEtJUlZaRS9maXlycFBlbWJkR1dTbFJ5Mm52eGI3QjkxT1F6bE9IdDMKYktFNEYrclNvNytsSGJTNXM0dWZSVXcxMjk4WnkwVUhtOVQrcmpJZ29NbXM0OWhSSDNlMmVPeDF4M3RNVlc1WkFSVGdlUkRQNmYxOQpvZDBxVnYzTk1EblJoOXp6TEJBZ0h5Qml4L0IvRlZaQkRVZDFNSjZSSVVQbnNEZllPcUlBanF0dVgvdGUwanY0VkwzWnRlSCtlZWQ2Cjk0ST0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==")
	if err != nil {
		log.Panic(err.Error())
	}
	return aliMiniProgram
}

func TestMerchantAesKeySet(t *testing.T) {
	client := initClient()
	if resp, err := client.Mini.MerchantAesKeySet(context.Background(), MerchantAesSetReq{
		MerchantAppId: "2021003139601135",
	}, EncryptType("AES"), EncryptKey("")); err != nil {
		t.Error(err)
	} else {
		t.Log(resp)
	}
}

func TestUploadVersion(t *testing.T) {
	client := initClient()
	var oauth UploadVersionBiz
	oauth.AppVersion = "0.0.3"
	oauth.TemplateID = "2021003141661773"
	oauth.TemplateVersion = "0.0.5"
	err := client.Mini.UploadVersion(context.Background(), &oauth, AppAuthToken(""))
	if err != nil {
		t.Error(err.Error())
	}
}

func TestGetAccessToken(t *testing.T) {
	client := initClient()
	var oauth OAuthToken
	oauth.GrantType = "authorization_code"
	oauth.Code = "6c44d3f9bb0d4b198ba94f88019bOX24"
	resp, err := client.OAuth.UserOAuthToken(context.Background(), oauth, AppAuthToken(""))
	if err != nil {
		t.Error(err.Error())
	} else {
		t.Log(resp)
	}
}

func TestBaseInfoQuery(t *testing.T) {
	client := initClient()
	resp, err := client.Mini.QueryBaseInfo(context.Background(), AppAuthToken(""))
	if err != nil {
		t.Error(err.Error())
	} else {
		t.Log(resp)
	}
}

func TestVersionGet(t *testing.T) {
	client := initClient()
	resp, err := client.Mini.QueryVersionList(context.Background(), QueryVersionListBiz{VersionStatus: "INIT"}, AppAuthToken(""))
	if err != nil {
		t.Error(err.Error())
	} else {
		t.Log(resp)
	}
}

func TestBuildVersionStatus(t *testing.T) {
	client := initClient()
	resp, err := client.Mini.QueryVersionBuild(context.Background(), &QueryVersionBuildBiz{AppVersion: "0.0.2"}, AppAuthToken(""))
	if err != nil {
		t.Error(err.Error())
	} else {
		t.Log(resp)
	}
}

func TestVersionDetail(t *testing.T) {
	client := initClient()
	resp, err := client.Mini.QueryVersionDetail(context.Background(), &QueryVersionDetailBiz{
		AppVersion: "0.0.4",
	}, AppAuthToken(""))
	if err != nil {
		t.Error(err.Error())
	} else {
		t.Log(resp)
	}
}

func TestAuditApply(t *testing.T) {
	client := initClient()

	err := client.Mini.ApplyVersionAudit(context.Background(), &ApplyVersionAuditBiz{
		AppVersion:   "0.0.1",
		AppLogo:      "https://appstoreisvpic.alipayobjects.com/prod/aa9efcb9-143e-4ebd-bf9c-38c4900ed8a0.png",
		ServicePhone: "13260683758",
		VersionDesc:  "这是一个测试，第一次做这个， 这是一个测试， 第一次做这个 ，这是一个测试， 第一次做这个， 这是一个测试 ，第一次做这个",
		RegionType:   "CHINA",
		AutoOnline:   "false",
		SpeedUp:      "false",
	}, AppAuthToken(""))
	if err != nil {
		t.Error(err.Error())
	}
}

func TestCancelAudit(t *testing.T) {
	client := initClient()
	err := client.Mini.CancelVersionAudit(context.Background(), &CancelVersionAuditBiz{
		AppVersion: "0.0.1",
	}, AppAuthToken(""))
	if err != nil {
		t.Error(err.Error())
	}
}

func TestCreateExperience(t *testing.T) {
	client := initClient()
	err := client.Mini.CreateExperience(context.Background(), &CreateExperienceBiz{
		AppVersion: "0.0.1",
		BundleID:   "com.alipay.alipaywallet",
	}, AppAuthToken(""))
	if err != nil {
		t.Error(err.Error())
	}
}

func TestGetExperienceStatus(t *testing.T) {
	client := initClient()
	resp, err := client.Mini.QueryExperience(context.Background(), &QueryExperienceBiz{
		AppVersion: "0.0.14",
		BundleID:   "com.alipay.alipaywallet",
	}, AppAuthToken(""))
	if err != nil {
		t.Error(err.Error())
	} else {
		t.Log(resp)
	}
}

func TestAliMiniMembersQuery(t *testing.T) {
	client := initClient()
	resp, err := client.App.QueryAppMembers(context.Background(), &QueryAppMembersBiz{
		Role: "EXPERIENCER",
	}, AppAuthToken(""))
	if err != nil {
		t.Error(err.Error())
	} else {
		t.Log(resp)
	}
}

func TestVenueInfoQuery(t *testing.T) {
	client := initClient()
	resp, err := client.CultureSportCenter.SportStoreInfoQuery(context.Background(), SportStoreInfoQueryReq{
		VenueId: "2022081811001042009300913926",
	}, AppAuthToken(""))
	if err != nil {
		t.Error(err.Error())
	} else {
		t.Log(resp)
	}
}
